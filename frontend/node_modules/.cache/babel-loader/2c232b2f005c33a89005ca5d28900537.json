{"ast":null,"code":"/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport { shimGetUserMedia } from './getusermedia';\nexport { shimGetDisplayMedia } from './getdisplaymedia';\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {\n          receiver: this.receiver\n        };\n      }\n\n    });\n  }\n}\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' || !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {\n      const nativeMethod = window.RTCPeerConnection.prototype[method];\n      const methodObj = {\n        [method]() {\n          arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);\n          return nativeMethod.apply(this, arguments);\n        }\n\n      };\n      window.RTCPeerConnection.prototype[method] = methodObj[method];\n    });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null]).then(stats => {\n      if (browserDetails.version < 53 && !onSucc) {\n        // Shim only promise getStats with spec-hyphens in type names\n        // Leave callback version alone; misc old uses of forEach before Map\n        try {\n          stats.forEach(stat => {\n            stat.type = modernStatsTypes[stat.type] || stat.type;\n          });\n        } catch (e) {\n          if (e.name !== 'TypeError') {\n            throw e;\n          } // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n\n\n          stats.forEach((stat, i) => {\n            stats.set(i, Object.assign({}, stat, {\n              type: modernStatsTypes[stat.type] || stat.type\n            }));\n          });\n        }\n      }\n\n      return stats;\n    }).then(onSucc, onErr);\n  };\n}\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {\n    return;\n  }\n\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) : Promise.resolve(new Map());\n  };\n}\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {\n    return;\n  }\n\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection || 'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n\n  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {\n    utils.deprecated('removeStream', 'removeTrack');\n    this.getSenders().forEach(sender => {\n      if (sender.track && stream.getTracks().includes(sender.track)) {\n        this.removeTrack(sender);\n      }\n    });\n  };\n}\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver = function addTransceiver() {\n      this.setParametersPromises = [];\n      const initParameters = arguments[1];\n      const shouldPerformCheck = initParameters && 'sendEncodings' in initParameters;\n\n      if (shouldPerformCheck) {\n        // If sendEncodings params are provided, validate grammar\n        initParameters.sendEncodings.forEach(encodingParam => {\n          if ('rid' in encodingParam) {\n            const ridRegex = /^[a-z0-9]{0,16}$/i;\n\n            if (!ridRegex.test(encodingParam.rid)) {\n              throw new TypeError('Invalid RID value provided.');\n            }\n          }\n\n          if ('scaleResolutionDownBy' in encodingParam) {\n            if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n              throw new RangeError('scale_resolution_down_by must be >= 1.0');\n            }\n          }\n\n          if ('maxFramerate' in encodingParam) {\n            if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n              throw new RangeError('max_framerate must be >= 0.0');\n            }\n          }\n        });\n      }\n\n      const transceiver = origAddTransceiver.apply(this, arguments);\n\n      if (shouldPerformCheck) {\n        // Check if the init options were applied. If not we do this in an\n        // asynchronous way and save the promise reference in a global object.\n        // This is an ugly hack, but at the same time is way more robust than\n        // checking the sender parameters before and after the createOffer\n        // Also note that after the createoffer we are not 100% sure that\n        // the params were asynchronously applied so we might miss the\n        // opportunity to recreate offer.\n        const {\n          sender\n        } = transceiver;\n        const params = sender.getParameters();\n\n        if (!('encodings' in params) || // Avoid being fooled by patched getParameters() below.\n        params.encodings.length === 1 && Object.keys(params.encodings[0]).length === 0) {\n          params.encodings = initParameters.sendEncodings;\n          sender.sendEncodings = initParameters.sendEncodings;\n          this.setParametersPromises.push(sender.setParameters(params).then(() => {\n            delete sender.sendEncodings;\n          }).catch(() => {\n            delete sender.sendEncodings;\n          }));\n        }\n      }\n\n      return transceiver;\n    };\n  }\n}\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters = function getParameters() {\n      const params = origGetParameters.apply(this, arguments);\n\n      if (!('encodings' in params)) {\n        params.encodings = [].concat(this.sendEncodings || [{}]);\n      }\n\n      return params;\n    };\n  }\n}\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises).then(() => {\n        return origCreateOffer.apply(this, arguments);\n      }).finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n\n    return origCreateOffer.apply(this, arguments);\n  };\n}\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises).then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      }).finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n\n    return origCreateAnswer.apply(this, arguments);\n  };\n}","map":{"version":3,"names":["utils","shimGetUserMedia","shimGetDisplayMedia","shimOnTrack","window","RTCTrackEvent","prototype","Object","defineProperty","get","receiver","shimPeerConnection","browserDetails","RTCPeerConnection","mozRTCPeerConnection","version","forEach","method","nativeMethod","methodObj","arguments","RTCIceCandidate","RTCSessionDescription","apply","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","localcandidate","remotecandidate","nativeGetStats","getStats","selector","onSucc","onErr","then","stats","stat","type","e","name","i","set","assign","shimSenderGetStats","RTCRtpSender","origGetSenders","getSenders","senders","sender","_pc","origAddTrack","addTrack","track","Promise","resolve","Map","shimReceiverGetStats","RTCRtpReceiver","origGetReceivers","getReceivers","receivers","wrapPeerConnectionEvent","srcElement","shimRemoveStream","removeStream","stream","deprecated","getTracks","includes","removeTrack","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","addTransceiver","setParametersPromises","initParameters","shouldPerformCheck","sendEncodings","encodingParam","ridRegex","test","rid","TypeError","parseFloat","scaleResolutionDownBy","RangeError","maxFramerate","transceiver","params","getParameters","encodings","length","keys","push","setParameters","catch","shimGetParameters","origGetParameters","concat","shimCreateOffer","origCreateOffer","createOffer","all","finally","shimCreateAnswer","origCreateAnswer","createAnswer"],"sources":["/Users/diaskywashi/Desktop/pettochat/frontend/node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js"],"sourcesContent":["/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}