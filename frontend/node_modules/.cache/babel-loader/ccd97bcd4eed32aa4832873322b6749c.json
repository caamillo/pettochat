{"ast":null,"code":"/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || window.RTCIceCandidate && 'foundation' in window.RTCIceCandidate.prototype) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate && args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate, parsedCandidate); // Add a serializer that does not serialize the extra attributes.\n\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment\n        };\n      };\n\n      return augmentedCandidate;\n    }\n\n    return new NativeRTCIceCandidate(args);\n  };\n\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype; // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n\n    return e;\n  });\n}\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n\n    });\n  }\n\n  const sctpInDescription = function (description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application' && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function (description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n\n    const version = parseInt(match[1], 10); // Test for NaN (yes, this is ugly)\n\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function (remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize = browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function (description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536; // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n\n    if (browserDetails.browser === 'firefox' && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp, 'a=max-message-size:');\n\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' && remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;\n\n  window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {\n    this._sctp = null; // Chrome decided to not expose .sctp in plan-b mode.\n    // As usual, adapter.js has to do an 'ugly worakaround'\n    // to cover up the mess.\n\n    if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n      const {\n        sdpSemantics\n      } = this.getConfiguration();\n\n      if (sdpSemantics === 'plan-b') {\n        Object.defineProperty(this, 'sctp', {\n          get() {\n            return typeof this._sctp === 'undefined' ? null : this._sctp;\n          },\n\n          enumerable: true,\n          configurable: true\n        });\n      }\n    }\n\n    if (sctpInDescription(arguments[0])) {\n      // Check if the remote is FF.\n      const isFirefox = getRemoteFirefoxVersion(arguments[0]); // Get the maximum message size the local peer is capable of sending\n\n      const canSendMMS = getCanSendMaxMessageSize(isFirefox); // Get the maximum message size of the remote peer.\n\n      const remoteMMS = getMaxMessageSize(arguments[0], isFirefox); // Determine final maximum message size\n\n      let maxMessageSize;\n\n      if (canSendMMS === 0 && remoteMMS === 0) {\n        maxMessageSize = Number.POSITIVE_INFINITY;\n      } else if (canSendMMS === 0 || remoteMMS === 0) {\n        maxMessageSize = Math.max(canSendMMS, remoteMMS);\n      } else {\n        maxMessageSize = Math.min(canSendMMS, remoteMMS);\n      } // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n      // attribute.\n\n\n      const sctp = {};\n      Object.defineProperty(sctp, 'maxMessageSize', {\n        get() {\n          return maxMessageSize;\n        }\n\n      });\n      this._sctp = sctp;\n    }\n\n    return origSetRemoteDescription.apply(this, arguments);\n  };\n}\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection && 'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  } // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n\n      if (dc.readyState === 'open' && pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' + pc.sctp.maxMessageSize + ' bytes)');\n      }\n\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n\n  const origCreateDataChannel = window.RTCPeerConnection.prototype.createDataChannel;\n\n  window.RTCPeerConnection.prototype.createDataChannel = function createDataChannel() {\n    const dataChannel = origCreateDataChannel.apply(this, arguments);\n    wrapDcSend(dataChannel, this);\n    return dataChannel;\n  };\n\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\n\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection || 'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange', this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n\n      if (cb) {\n        this.addEventListener('connectionstatechange', this._onconnectionstatechange = cb);\n      }\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  ['setLocalDescription', 'setRemoteDescription'].forEach(method => {\n    const origMethod = proto[method];\n\n    proto[method] = function () {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n\n          return e;\n        };\n\n        this.addEventListener('iceconnectionstatechange', this._connectionstatechangepoly);\n      }\n\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n\n  window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter(line => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n'); // Safari enforces read-only-ness of RTCSessionDescription fields.\n\n      if (window.RTCSessionDescription && desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n\n    return nativeSRD.apply(this, arguments);\n  };\n}\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  const nativeAddIceCandidate = window.RTCPeerConnection.prototype.addIceCandidate;\n\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n\n  window.RTCPeerConnection.prototype.addIceCandidate = function addIceCandidate() {\n    if (!arguments[0]) {\n      if (arguments[1]) {\n        arguments[1].apply(null);\n      }\n\n      return Promise.resolve();\n    } // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n    // in older versions.\n    // Native support for ignoring exists for Chrome M77+.\n    // Safari ignores as well, exact version unknown but works in the same\n    // version that also ignores addIceCandidate(null).\n\n\n    if ((browserDetails.browser === 'chrome' && browserDetails.version < 78 || browserDetails.browser === 'firefox' && browserDetails.version < 68 || browserDetails.browser === 'safari') && arguments[0] && arguments[0].candidate === '') {\n      return Promise.resolve();\n    }\n\n    return nativeAddIceCandidate.apply(this, arguments);\n  };\n}","map":{"version":3,"names":["SDPUtils","utils","shimRTCIceCandidate","window","RTCIceCandidate","prototype","NativeRTCIceCandidate","args","candidate","indexOf","JSON","parse","stringify","substr","length","nativeCandidate","parsedCandidate","parseCandidate","augmentedCandidate","Object","assign","toJSON","sdpMid","sdpMLineIndex","usernameFragment","wrapPeerConnectionEvent","e","defineProperty","value","writable","shimMaxMessageSize","browserDetails","RTCPeerConnection","get","_sctp","sctpInDescription","description","sdp","sections","splitSections","shift","some","mediaSection","mLine","parseMLine","kind","protocol","getRemoteFirefoxVersion","match","version","parseInt","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","browser","getMaxMessageSize","maxMessageSize","matchPrefix","origSetRemoteDescription","setRemoteDescription","sdpSemantics","getConfiguration","enumerable","configurable","arguments","isFirefox","canSendMMS","remoteMMS","Number","POSITIVE_INFINITY","Math","max","min","sctp","apply","shimSendThrowTypeError","wrapDcSend","dc","pc","origDataChannelSend","send","data","size","byteLength","readyState","TypeError","origCreateDataChannel","createDataChannel","dataChannel","channel","target","shimConnectionState","proto","completed","checking","iceConnectionState","_onconnectionstatechange","set","cb","removeEventListener","addEventListener","forEach","method","origMethod","_connectionstatechangepoly","_lastConnectionState","connectionState","newEvent","Event","dispatchEvent","removeExtmapAllowMixed","nativeSRD","desc","split","filter","line","trim","join","RTCSessionDescription","type","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","addIceCandidate","Promise","resolve"],"sources":["C:/Users/Camillo/Desktop/pettochat/frontend/node_modules/webrtc-adapter/src/js/common_shim.js"],"sourcesContent":["/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}